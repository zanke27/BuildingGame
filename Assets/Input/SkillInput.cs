//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/SkillInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SkillInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SkillInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SkillInput"",
    ""maps"": [
        {
            ""name"": ""SkillMap"",
            ""id"": ""d6c9ccf9-7b9c-4040-8cb2-f0604e2dccc6"",
            ""actions"": [
                {
                    ""name"": ""Skill1"",
                    ""type"": ""Button"",
                    ""id"": ""2453c2b8-0ed0-4632-8be3-cada74387924"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill2"",
                    ""type"": ""Button"",
                    ""id"": ""4322748d-b7b9-4aef-b7ff-59ebcddf1a77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill3"",
                    ""type"": ""Button"",
                    ""id"": ""de64396b-ee82-454f-ba63-915ef0f9bdc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill4"",
                    ""type"": ""Button"",
                    ""id"": ""8c6fdbd1-51c2-4774-ae8c-879e98e02503"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c60ed286-96df-46c1-80fb-ecafbd7eb6af"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""adfbdb16-1797-402b-9d10-ca4cdf4c417c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a50f405-868c-4613-a9c4-8478c39f3e35"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04b3d6ce-ba8f-43f5-adbf-e02cf0e8f5b6"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SkillMap
        m_SkillMap = asset.FindActionMap("SkillMap", throwIfNotFound: true);
        m_SkillMap_Skill1 = m_SkillMap.FindAction("Skill1", throwIfNotFound: true);
        m_SkillMap_Skill2 = m_SkillMap.FindAction("Skill2", throwIfNotFound: true);
        m_SkillMap_Skill3 = m_SkillMap.FindAction("Skill3", throwIfNotFound: true);
        m_SkillMap_Skill4 = m_SkillMap.FindAction("Skill4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SkillMap
    private readonly InputActionMap m_SkillMap;
    private ISkillMapActions m_SkillMapActionsCallbackInterface;
    private readonly InputAction m_SkillMap_Skill1;
    private readonly InputAction m_SkillMap_Skill2;
    private readonly InputAction m_SkillMap_Skill3;
    private readonly InputAction m_SkillMap_Skill4;
    public struct SkillMapActions
    {
        private @SkillInput m_Wrapper;
        public SkillMapActions(@SkillInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Skill1 => m_Wrapper.m_SkillMap_Skill1;
        public InputAction @Skill2 => m_Wrapper.m_SkillMap_Skill2;
        public InputAction @Skill3 => m_Wrapper.m_SkillMap_Skill3;
        public InputAction @Skill4 => m_Wrapper.m_SkillMap_Skill4;
        public InputActionMap Get() { return m_Wrapper.m_SkillMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkillMapActions set) { return set.Get(); }
        public void SetCallbacks(ISkillMapActions instance)
        {
            if (m_Wrapper.m_SkillMapActionsCallbackInterface != null)
            {
                @Skill1.started -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill1;
                @Skill1.performed -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill1;
                @Skill1.canceled -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill1;
                @Skill2.started -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill2;
                @Skill2.performed -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill2;
                @Skill2.canceled -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill2;
                @Skill3.started -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill3;
                @Skill3.performed -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill3;
                @Skill3.canceled -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill3;
                @Skill4.started -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill4;
                @Skill4.performed -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill4;
                @Skill4.canceled -= m_Wrapper.m_SkillMapActionsCallbackInterface.OnSkill4;
            }
            m_Wrapper.m_SkillMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Skill1.started += instance.OnSkill1;
                @Skill1.performed += instance.OnSkill1;
                @Skill1.canceled += instance.OnSkill1;
                @Skill2.started += instance.OnSkill2;
                @Skill2.performed += instance.OnSkill2;
                @Skill2.canceled += instance.OnSkill2;
                @Skill3.started += instance.OnSkill3;
                @Skill3.performed += instance.OnSkill3;
                @Skill3.canceled += instance.OnSkill3;
                @Skill4.started += instance.OnSkill4;
                @Skill4.performed += instance.OnSkill4;
                @Skill4.canceled += instance.OnSkill4;
            }
        }
    }
    public SkillMapActions @SkillMap => new SkillMapActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface ISkillMapActions
    {
        void OnSkill1(InputAction.CallbackContext context);
        void OnSkill2(InputAction.CallbackContext context);
        void OnSkill3(InputAction.CallbackContext context);
        void OnSkill4(InputAction.CallbackContext context);
    }
}
